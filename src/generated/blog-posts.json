[
  {
    "id": "2025-10-05-daily",
    "title": "Hono + Deno + tRPC サーバーサイド開発 - part1",
    "excerpt": "2025年10月05日の日報です。",
    "date": "2025-10-05",
    "tags": [
      "Daily Report",
      "tRPC",
      "Hono",
      "Deno"
    ],
    "readTime": "3 min read",
    "content": "\n# tRPC\n\nこれまで React Native のアプリケーションを作っていましたが、それから呼び出す API サーバーを書いています。\n\nAPI を作る上で、本業では gRPC や REST で書くことがよくあるのですが、今回は [`tRPC`](https://trpc.io/docs/) を使うことにしました。\n\n前提として、新しいものを使ってみたいという気持ちがありました。また、個人開発なのもあり Client - Server は `Monorepo` で構成しているのと、出来るだけ Server の変更による Client の変更コストが安いようにしたいという気持ちがありました。パフォーマンス云々よりもまずは開発容易性を重視しました。こういった要件の元で調査を進めていった結果 tRPC にたどり着きました。GraphQL も候補としては挙がっていたのですが、今回のプロジェクトはフルスタック Typescript なので型とエディタの補完をフルに享受することができるのと、GraphQL より tRPC の方が学習しやすいようにみえたため tRPC がよかろうという結論になりました。\n\n# Hono, Deno\n\nサーバーは [`Hono`](https://hono.dev/) を利用します。ランタイムには [`Deno`](https://deno.com/) を使ってみることにしました。どちらも使ってみたかったからですね。この辺りは解像度上がったらもうちょっと色々書いていこうと思います。\n\n# 悩み\n\n悩みに悩んで tRPC を採用するに至ったのですが `Hono RPC` というものがあるのを知りました。これ自体は tRPC と同様に型安全。その上で REST に乗って書けるのでより学習しやすいだろうと想像できました。明日以降 tRPC を捨ててこっちに移動している気がする。。。\n"
  },
  {
    "id": "2025-10-17-daily",
    "title": "クライアントとサーバーの統合と 1Password CLI",
    "excerpt": "2025年10月05日の日報です。",
    "date": "2025-10-05",
    "tags": [
      "Daily Report",
      "honoRPC",
      "Hono",
      "Deno",
      "1Password"
    ],
    "readTime": "5 min read",
    "content": "\n# 前置き\n\n2 week 弱くらい空いてしまった... 最近仕事で Rails アプデをやっていて、それが楽しくてあまり趣味プログラミングをする暇がなかったという言い訳をさせてください。\n\nというわけで....ちょこちょこと触っていたのですが、そんなに進捗ないです。\n\n# honoRPC\n\ntRPC を使うという話をしていましたが、気が変わって honoRPC を利用することにしました。tRPC と打って変わって REST ぽい書き味が、やはり体に合うなという印象です。\n\n# Integration\n\nhonoRPC を interface にして ReactNative + Expo のクライアントアプリケーションと、Hono + Deno のサーバーサイドを統合しました。\n\n書くのは超絶簡単で、\n\nhttps://hono.dev/docs/guides/rpc\n\nこいつを見れば大体わかります。また、\n\nhttps://hono.dev/docs/guides/best-practices\n\nこの辺りのベストプラクティスのドキュメントも、非常に分かりやすいとおもっています。\n\n# Architecture\n\n実はサーバーサイドは Layered Architecture で構成していて、クライアントは ExpoRouter があるので Expo のプラクティスに基本的には沿っています。\n\nただ、今回のように honoRPC の interface 部分をどこに持ってくるか、サーバーサイドの API を呼ぶようなコードをどこに書くかというのが悩みどころでした。\n\nhttps://expo.dev/blog/expo-app-folder-structure-best-practices\n\nこの記事を参考にしてみました。Expo の公式記事なのでそれなりにフレームワークとの兼ね合いは考慮されたモノでしょうし。主に見ればいいのは、\n\nhttps://expo.dev/blog/expo-app-folder-structure-best-practices\n\nこのサマリーの部分ですかね。今回は自分も app folder の中に api folder を切って、そこに記述しています。\n\n```typescript\nimport { client } from './client';\n\nexport const fetchTest = async () => {\n  try {\n    const res = await client.index.$get();\n    if (!res.ok) {\n      throw new Error(`API Error: ${res.status}`);\n    }\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    throw new Error(`API Test Failed: ${error}`);\n  }\n};\n```\n\n例えばこんな感じです。そして、共通部分となるコードは\n\n```typescript\nimport { hc } from 'hono/client';\nimport type { AppType } from '../../../api/src/presentation/index.ts';\n\n// TODO: URL は環境ごとに変えたいのでどうするか考える\nexport const client = hc<AppType>('http://localhost:8000');\n```\n\nこんな感じで `client.ts` として逃すことにしました。気に入ってないのは `AppType` を参照するのにサーバー側のパスを指定しないといけないことですかね... この辺りは `gRPC` のようなスキーマから生成する系の interface を持つ技術スタックの方が好きだなぁと思いました。\n\nhttps://x.com/_ayame113_/status/1974960185576972545\n\n同じような気持ちを吐露している方がいた。Yusuke Wada さんもいいねと言っている。\nが、どうなんでしょうね？神経質になっちゃう気持ちを抑えて、あえてこうしたのだと思っていたけれど、口ぶりから見るにそんなこともないのかもしれない？\n\n正直僕はスキーマがある方が好きなんだけれど、今の方がシンプルで Hono らしいっちゃらしいのではという気持ちにもなった。これでスキーマ作る方がパフォーマンス出るから対応した。とかだと、それはそれで Hono らしいかもしれない。\n\n# 1Password CLI\n\n環境変数を例えばローカルとリモートで、コードの変更なしで動的に差し替えたいようなことって全エンジニアが一度は思いを馳せたことがあると思います。\n\n多分 .env を使ったり、git submodule を使ったりがメインだと思いますが、Claude Code さんに相談すると 1Password CLI がいいよとおすすめをもらった。\n\n1Password はいわゆるパスワードマネージャーだと思っていたのですが、実はもっと幅広く任意の重要情報を積めるようなソリューションだということを知りました。\n\n例えば、API token を登録しておけば 1Password CLI 経由で引いてくることが可能になります。このような値を登録すると、代わりの参照キーのようなものが払い出されるので、アプリケーションからはそれを用いて参照するというイメージです。\n\nこんな便利なソリューションがあるとは知らなかった.... shared モードみたいなものあるらしく、チーム開発で他人に共有すべきものは共有可能になるみたいです。めちゃめちゃいいですね。\n\n今作っているアプリケーションでも当然 env 系の値は使いますので、今回は 1Password を利用していこうと思います。\n"
  },
  {
    "id": "2025-10-02-daily",
    "title": "React Native 開発 - part6",
    "excerpt": "2025年10月02日の日報です。",
    "date": "2025-10-02",
    "tags": [
      "Daily Report",
      "React Native",
      "Expo"
    ],
    "readTime": "1 min read",
    "content": "\n# React Native, Expo で UI の作成\n\n大幅にリファクタリングを進めました。UI のデザインも洗練させて、とりあえずのモックアップとしては十分な領域に到達したかと思います。\n\n徐々にサーバーサイドの開発に着手していこうと思っています。また、ReactNative は使わないと忘れそうなので、設定画面の開発を進めていこうと思います。\n\n![雑 UI](/images/blog/2025-10-02-daily/playground.gif 'playground')\n"
  },
  {
    "id": "2025-09-27-daily",
    "title": "React Native 開発 - part5 と Google Analytics の導入",
    "excerpt": "2025年09月27日の日報です。",
    "date": "2025-09-27",
    "tags": [
      "Daily Report",
      "Google Analytics",
      "React Native",
      "Expo"
    ],
    "readTime": "4 min read",
    "content": "\n# 前置き\n\n本業側のリリース作業があり、労働負荷が高まった結果として日報を書く元気が湧かなかったです。また少しずつ頑張ります。\n\n# Google Analytics\n\n[当サイト](https://hashiiiii.com/)に Google Analytics を導入しました。\nこれといった導入理由はなくて、なんとなく使ってみたかったからです。\nトラフィックを少し見るくらいになると思います。\n\n## React Native, Expo で UI の作成\n\n今日は[前回](./2025-09-23-daily.md)から更に少し進化をしました。型エイリアスという仕組みを使ってデータを構造化しました。\n\n```tsx\ntype ChatMessage = {\n  name: string;\n  actor: Actor;\n  text: string;\n  createdAt: string;\n};\n\nenum Actor {\n  User = 'user',\n  Assistant = 'assistant',\n}\n```\n\nこれは C# でいう `record` と似たような概念です。JS にトランスパイルされるとただの JS オブジェクトとして扱われるらしい。\nこの `ChatMessage` は `Actor` 毎の style が用意されていて actor によって style が切り替わるようなイメージです。また、それぞれの style には共通化可能な部分があったので共通用の style も定義しました。\n\n```tsx\n<SectionList\n  sections={[{ data: _dataList }]}\n  keyExtractor={(item) => item.createdAt}\n  renderItem={({ item }) => (\n    <View style={[styles.chat, item.actor === Actor.User ? styles.chatUser : styles.chatAi]}>\n      {item.text}\n    </View>\n  )}\n/>\n```\n\nこんな感じ。てか、style って配列で複数指定可能なのですね。今日も勉強になった。\n\n![雑 UI](/images/blog/2025-09-27-daily/playground.gif 'playground')\n\n出来上がった UI はこれ。Assistant のレスポンスはハードコードしてます。\n"
  },
  {
    "id": "2025-09-23-daily",
    "title": "React Native 開発 - part4 と Unity IAP 基盤のバグ調査",
    "excerpt": "2025年09月23日の日報です。",
    "date": "2025-09-23",
    "tags": [
      "Daily Report",
      "React Native",
      "Expo",
      "Unity",
      "IAP"
    ],
    "readTime": "3 min read",
    "content": "\n# React Native, Expo で UI の作成\n\nApp.tsx 内に React Native の Core Component を利用して色々と雑に UI を組む練習の続きです。\n少しレベルアップしていて、\n\n- `StyleSheet` を利用してデザインをあてる\n- `React Hooks` の `useState` を利用した状態管理\n- UI を組み合わせたイベント駆動なコード\n\nなどを書いてみました。出来上がったのがこれ。\n\n![雑 UI](/images/blog/2025-09-23-daily/playground.gif 'playground')\n\nこの List View 的なやつを作るには Core Component の `SectionList` を利用しています。レンダリング結果を見て分かるように Section は存在していないです。つまり Section を構築するためのフィールドは空になっています。SectionList というコンポーネントを利用しているのに Section がないというのは...これでほんまにええんか感はあります....こういうものなんですかね？（too much なものよりは just right なものを使う方が好みです）詳しい人教えてください。\n\n# 某案件の課金周りの調査\n\n主に Unity IAP 周りのクライアントの実装の調査をしていました。IAP の課金トランザクションフローでは、ストアから渡されたレシートを検証サーバー（実態は NestJS で書かれたごく普通の API サーバー）に送って検証を行っています。現状だと、渡したレシートを用いてストアの検証 API を叩くと Invalid Value になるらしい。\n\n祝日だったのであまり根気を入れて見れてないですが、クライアントとサーバーの内部実装をパッとみた限りはおかしいところを見つけられず....明日サーバー担当者の人に追加でログ仕込んでもらうよう依頼しつつ、一旦はクライアント側の実装を再度見直してみよう。\n\n# 読書\n\n[パーフェクト Ruby on Rails](https://gihyo.jp/book/2020/978-4-297-11462-6) を 40 ページくらい読んだ。\n"
  },
  {
    "id": "2025-09-21-daily",
    "title": "React Native 開発 - part3",
    "excerpt": "2025年09月21日の日報です。",
    "date": "2025-09-21",
    "tags": [
      "Daily Report",
      "React Native",
      "Expo",
      "Vercel"
    ],
    "readTime": "1 min read",
    "content": "\n# React Native, Expo で UI の作成\n\nApp.tsx 内に React Native の Core Component を利用して色々と雑に UI を組む練習をしていました。\n\n![雑 UI](/images/blog/2025-09-21-daily/playground.png 'playground')\n\n触って覚えていくしかなさそう。ある程度覚えたら、画面のレイアウト組むのは AI に任せるでいいかな.... それと比べて遷移周りとか状態管理まわりは楽しめそうな予感がしている。週の半ばくらいからはそっちやろうかなと思います。\n\n# 読書\n\n[パーフェクト Ruby on Rails](https://gihyo.jp/book/2020/978-4-297-11462-6) を 40 ページくらい読んだ。\n"
  },
  {
    "id": "2025-09-20-daily",
    "title": "React Native 開発 - part2",
    "excerpt": "2025年09月20日の日報です。",
    "date": "2025-09-20",
    "tags": [
      "Daily Report",
      "React Native",
      "Expo",
      "Vercel"
    ],
    "readTime": "1 min read",
    "content": "\n# React Native, Expo, React のバージョンアップ\n\nプロジェクトの React Native をなぜか 0.76 で進めていたので 0.81 まで上げました。\nそれに伴って Expo のバージョンを 54 系に, React のバージョンを 19 系に上げました。\n\n# Vercel アカウント切り替え\n\nVercel は無料枠で、v0 は Premium プランを契約して利用しています。また、両者ともに Google Account 認証を利用しています。\nところが、サチっていたのか利用している Google Account が異なることに気づいてしまいました...\n\nGoogle Account セッションの関係で、それぞれのサービスでアカウントの切り替えに苦労する[^1]ため、Vercel を v0 で利用する Google Account に合わせました。結果としてプロジェクトを作り直す必要があったため、それに伴って CI で利用していた環境変数の値を払い出し直したりなどしました。\n\n# やること\n\n- プロダクトの UI 作成\n\n[^1]: セッションが維持されてしまうため、片方をシークレットウィンドウでサインインするという工程が必要\n"
  },
  {
    "id": "2025-09-19-daily",
    "title": "React Native 開発 - part1",
    "excerpt": "2025年09月19日の日報です。",
    "date": "2025-09-19",
    "tags": [
      "Daily Report",
      "React Native",
      "Expo",
      "v0"
    ],
    "readTime": "3 min read",
    "content": "\n# 前置き\n\n今日から日報を書こうと思います。ホームページをせっかく作ったのに塩漬けにするのは勿体無いので....アクティブなものにしていきたいですね。\n今は React Native + Expo でマルチプラットフォーム（Web, iOS, Android）向けのアプリケーションを作っています。\n1 source でマルチプラットフォーム展開可能ということで、前述の技術スタックを採用しました。\nあとは AI と Typescript そしてそのエコシステムの相性が非常に相性が良いのもあり、今後 React Native が再興する世界線があるのではと睨んでいたり...\n\n# React Native チュートリアル\n\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/style\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/height-and-width\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/flexbox\n\n上記 UI の組み方の勉強中。Web で Expo の Snack を利用した動作確認が可能なので、ちょこちょこコードをいじりつつ手触りの確認をしています。\n\n# v0 を利用したデザインのモックアップ\n\n- https://v0.app/\n\nv0 を利用してデザインのモックアップを作成しています。ちなみにデフォルトだと v0 は React Native + Expo に対応したソースコードを吐き出してくれないっぽいです。\n\n- https://v0.app/chat/react-native-ui-design-VLfLJnzCmHs\n\nWeb 上で Share されていた上記をベースにプロジェクトを作ってみたところ、React Native + Expo のコードを吐いてくれました。明日以降はこちらのコードを読みつつ、学び得た知識でリファクタリングをしていこうかなと思っています。ちなみに、今回の開発はスキルアップも兼ねているので vibe coding はあまりする気がないです。\n\n# やること\n\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/flexbox の続き\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/images\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/colors この辺り含むカラーの管理を他 repository 見つつ勉強\n- v0 で吐き出したコードのリファクタリング\n"
  },
  {
    "id": "2025-06-25-markdown-memo",
    "title": "マークダウン記法メモ",
    "excerpt": "当ホームページで利用可能なマークダウン記法をメモするための記事です。",
    "date": "2025-06-25",
    "tags": [
      "Markdown",
      "Test"
    ],
    "readTime": "5 min read",
    "content": "\n# 概要\n\nこの記事では、当ホームページの BLOG 機能にて利用可能なマークダウン記法をメモしておきます。\n\n## マークダウン記法\n\nここまでで `h1`, `h2` のテストは済んでいます。\n\n### h3\n\n`h3` まで対応しています。\n\n### リスト\n\n- 項目 1\n  - 項目 1.1\n    - 項目 1.1.1\n      - 項目 1.1.1.1\n        - 項目 1.1.1.1.1\n          - 項目 1.1.1.1.1.1\n\nネストが深過ぎると見にくいので `x.y.z` くらいまでにしましょう。\n\n1. 番号付きリスト\n2. 項目 2\n3. 項目 3\n\n番号付きリストのネストには今後対応予定。\n\n### コードブロック\n\n```typescript\nfunction greet(name: string): string {\n  return `Hello, ${name}!`;\n}\n\nconst message = greet('World');\nconsole.log(message);\n```\n\n### 水平線\n\n---\n\n### テーブル\n\n| ヘッダー1 | ヘッダー2 | ヘッダー3 |\n| --------- | --------- | --------- |\n| セル1     | セル2     | セル3     |\n| セル4     | セル5     | セル6     |\n\n### リンク\n\n[これはリンクです](https://github.com/hashiiiii)\n\n### 画像\n\n![Tokyo Night テーマのサンプル画像](/images/blog/sample-image.svg 'Tokyo Night Sample Image')\n\n### タスクリスト\n\n- [x] 完了したタスク\n- [ ] 未完了のタスク\n\n### 引用ブロック\n\n> これは引用ブロックです。\n> 複数行にわたる引用も可能です。\n>\n> > ネストした引用もできます。\n\n### アラート記法\n\n> **Note**: note です。\n\n> **Tip**: tip です。\n\n> **Warning**: warning です。\n\n> **Danger**: danger です。\n\n### Mermaid 図表のテスト\n\n```mermaid\ngraph TD\n    A[開始] --> B{条件分岐}\n    B -->|Yes| C[処理A]\n    B -->|No| D[処理B]\n    C --> E[終了]\n    D --> E\n```\n\n```mermaid\nsequenceDiagram\n    participant A as ユーザー\n    participant B as フロントエンド\n    participant C as API\n    participant D as データベース\n\n    A->>B: リクエスト送信\n    B->>C: API呼び出し\n    C->>D: データ取得\n    D-->>C: レスポンス\n    C-->>B: JSONデータ\n    B-->>A: 画面表示\n```\n\n### HTML タグの使用\n\n<details>\n<summary>クリックして詳細を表示</summary>\n\nこれは HTML の `<details>` タグを使用した折りたたみ可能なコンテンツです。\n\n- マークダウン記法も使用可能\n- **太字** や _斜体_ も OK\n- `コード` も問題なし\n\n```javascript\n// コードブロックも動作します\nfunction example() {\n  console.log('詳細が表示されました！');\n}\n```\n\n</details>\n\n### 数式表示\n\nインライン数式: $E = mc^2$\n\nブロック数式:\n\n$$\n\\int_{-\\infty}^{\\infty} e^{-x^2} dx = \\sqrt{\\pi}\n$$\n\n複雑な数式:\n\n$$\n\\frac{\\partial}{\\partial t} \\Psi(\\mathbf{r}, t) = \\frac{i\\hbar}{2m} \\nabla^2 \\Psi(\\mathbf{r}, t) + V(\\mathbf{r}) \\Psi(\\mathbf{r}, t)\n$$\n\n### スタイルの組み合わせ\n\n**_太字かつイタリック_**\n\n~~取り消し線~~\n\n### エスケープ文字\n\n\\*アスタリスクをエスケープしなかったら、この文章はイタリックになっています。\\*\n\n### 脚注\n\nこれは本文です[^1]。\n\n[^1]: 脚注を本文につけると、このセクションは機械的に作成されます。\n"
  }
]