[
  {
    "id": "2025-09-19-daily",
    "title": "20250919-日報",
    "excerpt": "2025年09月19日の日報です。",
    "date": "2025-09-19",
    "tags": [
      "React Native",
      "Expo",
      "v0"
    ],
    "readTime": "5 min read",
    "content": "\n# 前置き\n\n今日から日報を書こうと思います。ホームページをせっかく作ったのに塩漬けにするのは勿体無いので....アクティブなものにしていきたいですね。\n今は React Native + Expo で Web, iOS, Android マルチプラットフォーム向けのアプリケーションを作っています。\n1 source でマルチプラットフォームやれるということで前述の技術スタックを採用しました。\nあとは AI と Typescript やそのエコシステムの相性が非常に相性が良いので、今後また React Native が流行る世界線が来るのではと睨んでいるというのもあります。\n\n# やったこと\n\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/style\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/height-and-width\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/flexbox\n\n上記の UI の組み方の勉強中。Web で Expo の Snack を利用した動作確認が可能なので、ちょこちょこコードをいじりつつ手触りの確認をしています。\n\n- https://v0.app/\n\nv0 を利用してデザインのモックアップを作成しています。デフォルトだと v0 は React Native + Expo に対応したソースコードを吐き出してくれないみたいなのですが、\n\n- https://v0.app/chat/react-native-ui-design-VLfLJnzCmHs\n\nWeb 上で Share されていた上記のプロトコルを import することで、React Native + Expo のコードを吐いてみました。明日以降はこちらのコードを読みつつ、学び得た知識でリファクタリングをしていこうかなと思っています。今回の開発はスキルアップも兼ねているので vibe coding はあまりする気がないです。\n\n# やること\n\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/flexbox の続き\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/images\n- https://reactnative-archive-august-2025.netlify.app/docs/0.76/colors この辺り含むカラーの管理を他 repository 見つつ勉強\n- v0 で吐き出したコードのリファクタリング\n"
  },
  {
    "id": "2025-06-25-markdown-memo",
    "title": "マークダウン記法メモ",
    "excerpt": "当ホームページで利用可能なマークダウン記法をメモするための記事です。",
    "date": "2025-06-25",
    "tags": [
      "Markdown",
      "Test"
    ],
    "readTime": "5 min read",
    "content": "\n# 概要\n\nこの記事では、当ホームページの BLOG 機能にて利用可能なマークダウン記法をメモしておきます。\n\n## マークダウン記法\n\nここまでで `h1`, `h2` のテストは済んでいます。\n\n### h3\n\n`h3` まで対応しています。\n\n### リスト\n\n- 項目 1\n  - 項目 1.1\n    - 項目 1.1.1\n      - 項目 1.1.1.1\n        - 項目 1.1.1.1.1\n          - 項目 1.1.1.1.1.1\n\nネストが深過ぎると見にくいので `x.y.z` くらいまでにしましょう。\n\n1. 番号付きリスト\n2. 項目 2\n3. 項目 3\n\n番号付きリストのネストには今後対応予定。\n\n### コードブロック\n\n```typescript\nfunction greet(name: string): string {\n  return `Hello, ${name}!`;\n}\n\nconst message = greet('World');\nconsole.log(message);\n```\n\n### 水平線\n\n---\n\n### テーブル\n\n| ヘッダー1 | ヘッダー2 | ヘッダー3 |\n| --------- | --------- | --------- |\n| セル1     | セル2     | セル3     |\n| セル4     | セル5     | セル6     |\n\n### リンク\n\n[これはリンクです](https://github.com/hashiiiii)\n\n### 画像\n\n![Tokyo Night テーマのサンプル画像](/images/blog/sample-image.svg 'Tokyo Night Sample Image')\n\n### タスクリスト\n\n- [x] 完了したタスク\n- [ ] 未完了のタスク\n\n### 引用ブロック\n\n> これは引用ブロックです。\n> 複数行にわたる引用も可能です。\n>\n> > ネストした引用もできます。\n\n### アラート記法\n\n> **Note**: note です。\n\n> **Tip**: tip です。\n\n> **Warning**: warning です。\n\n> **Danger**: danger です。\n\n### Mermaid 図表のテスト\n\n```mermaid\ngraph TD\n    A[開始] --> B{条件分岐}\n    B -->|Yes| C[処理A]\n    B -->|No| D[処理B]\n    C --> E[終了]\n    D --> E\n```\n\n```mermaid\nsequenceDiagram\n    participant A as ユーザー\n    participant B as フロントエンド\n    participant C as API\n    participant D as データベース\n\n    A->>B: リクエスト送信\n    B->>C: API呼び出し\n    C->>D: データ取得\n    D-->>C: レスポンス\n    C-->>B: JSONデータ\n    B-->>A: 画面表示\n```\n\n### HTML タグの使用\n\n<details>\n<summary>クリックして詳細を表示</summary>\n\nこれは HTML の `<details>` タグを使用した折りたたみ可能なコンテンツです。\n\n- マークダウン記法も使用可能\n- **太字** や _斜体_ も OK\n- `コード` も問題なし\n\n```javascript\n// コードブロックも動作します\nfunction example() {\n  console.log('詳細が表示されました！');\n}\n```\n\n</details>\n\n### 数式表示\n\nインライン数式: $E = mc^2$\n\nブロック数式:\n\n$$\n\\int_{-\\infty}^{\\infty} e^{-x^2} dx = \\sqrt{\\pi}\n$$\n\n複雑な数式:\n\n$$\n\\frac{\\partial}{\\partial t} \\Psi(\\mathbf{r}, t) = \\frac{i\\hbar}{2m} \\nabla^2 \\Psi(\\mathbf{r}, t) + V(\\mathbf{r}) \\Psi(\\mathbf{r}, t)\n$$\n\n### スタイルの組み合わせ\n\n**_太字かつイタリック_**\n\n~~取り消し線~~\n\n### エスケープ文字\n\n\\*アスタリスクをエスケープしなかったら、この文章はイタリックになっています。\\*\n\n### 脚注\n\nこれは本文です[^1]。\n\n[^1]: 脚注を本文につけると、このセクションは機械的に作成されます。\n"
  }
]